generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model media_items {
  media_id         Int                @id @default(autoincrement())
  media_type_id    Int
  title            String             @db.VarChar(255)
  creator          String?            @db.VarChar(255)
  release_year     Int?
  external_id      String?            @db.VarChar(100)
  image_url        String?            @db.VarChar(255)
  media_types      media_types        @relation(fields: [media_type_id], references: [media_type_id], onDelete: NoAction, onUpdate: NoAction)
  media_tags       media_tags[]
  user_media_items user_media_items[]
  user_media_tags  user_media_tags[]

  @@index([title], map: "idx_media_items_title")
}

model media_tags {
  media_id    Int
  tag_id      Int
  media_items media_items @relation(fields: [media_id], references: [media_id], onDelete: Cascade, onUpdate: NoAction)
  tags        tags        @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([media_id, tag_id])
}

model media_types {
  media_type_id Int           @id @default(autoincrement())
  name          String        @db.VarChar(20)
  media_items   media_items[]
}

model tags {
  tag_id          Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(50)
  media_tags      media_tags[]
  user_media_tags user_media_tags[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_media_items {
  user_media_id Int          @id @default(autoincrement())
  user_id       Int?
  media_id      Int?
  rating        Decimal?     @db.Decimal(2, 1)
  status        String       @db.VarChar(20)
  review        String?
  date_consumed DateTime?    @db.Date
  date_added    DateTime?    @default(now()) @db.Timestamptz(6)
  media_items   media_items? @relation(fields: [media_id], references: [media_id], onDelete: Cascade, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, media_id])
  @@index([media_id], map: "idx_user_media_items_media_id")
  @@index([user_id], map: "idx_user_media_items_user_id")
}

model user_media_tags {
  user_id     Int
  media_id    Int
  tag_id      Int
  media_items media_items @relation(fields: [media_id], references: [media_id], onDelete: Cascade, onUpdate: NoAction)
  tags        tags        @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)
  users       users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, media_id, tag_id])
}

model users {
  user_id          Int                @id @default(autoincrement())
  username         String             @unique @db.VarChar(50)
  email            String             @unique @db.VarChar(100)
  password_hash    String             @db.VarChar(255)
  last_login       DateTime?          @db.Timestamptz(6)
  user_media_items user_media_items[]
  user_media_tags  user_media_tags[]
}
